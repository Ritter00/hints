Сайт https://www.djangoproject.com/  	# следуем инструкциям
https://django.fun/docs/django/ru/3.1/	# документацияя на русском
https://djbook.ru/ch01.html
https://djangodoc.ru/
https://pocoz.gitbooks.io/django-v-primerah/content/ Джанго в примерах

python -m venv venv     	# создаем виртуальное окружение, с названием "venv"
venv\scripts\activate    	# активируем его 
venv\scripts\deactivate		# деактивируем его
pip3 install django      	# устанавливаем Django
django-admin startproject project    # создаем пустой проект с названием project или python -m django-admin startproject project
django-admin startproject project .	# тоже, но сточкой создается в текущей папке
python manage.py runserver 	# запускаем пустой проект  # в браузере http://127.0.0.1:8000/ (локальный серв или Вместо 127.0.0.1 можете также прописать localhost)
python manage.py startapp news	# новое приложение news -добавить в установленные приложения settings.py и найдем там список INSTALLED_APPS

python manage.py makemigrations [<имя приложения>] 	# создание миграций (обратите внимание, что имя приложения — параметр необязательный, если его указать, то создаются только миграции для конкретного приложения)
python manage.py migrate 	# применить созданные миграции, т.е. внести изменения уже именно в саму базу данных (создать новые или редактировать старые модели).
python manage.py showmigrations	#  показать все изменения вносимые в базу данных.
python manage.py createsuperuser #  создать суперпользователя
python manage.py changepassword <имя пользователя> #  сбросить пароль
python manage.py runserver 	# запустить локальный сервер
python manage.py dumpdata --format=json > mydata.json		#  выгрузить все записи из нашей БД в JSON-файл
python manage.py dumpdata --format=xml > mydata.xml		#  выгрузить все записи из нашей БД в xml-файл
python manage.py loaddata mydata.json				#  загрузить данные из файла
python manage.py dumpdata --format=xml sample_app > sampledata.xml #  выгрузить данные из приложения(например, из sample_app)
python manage.py flush 		# полная очистка базы данных, т. е. удаление всех данных из таблиц в ней.
--database и очистить какую-то конкретную БД.
--database может указывать на базу данных (названия берутся из настроек), из которой будут выгружаться или в которую будут загружаться данные, на случай если у вас их несколько.

_____________________________________________________________________________________________________________
Создание пустых страниц:
https://docs.djangoproject.com/en/4.0/ref/contrib/flatpages/     # не забыть from django.urls import path, include

в Settings.py:
import os			# импортировать os
INSTALLED_APPS = ['...',
'django.contrib.sites',
'django.contrib.flatpages', ]	# Добавить эти приложения
SITE_ID = 1			# добавить эту константу
MIDDLEWARE = ['...',
'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',	# добавить декоратор
] 

_________________________________________________________________________________________________________________
TEMPLATES = ['...',
'DIRS': [os.path.join(BASE_DIR, 'templates')],		# изменить 'DIRS'=
'...']
STATICFILES_DIRS = [
    BASE_DIR / "static"]	#

Создать на уровне manage.py - templates/flatpages/default.html # default.html-шаблон и здесь все страницы

Создать на уровне manage.py папку static # Сюда распаковать архив с CSS, JS , image - Bootstrap
в самом начале HTML-файла дописать {% load static %}
И перед каждой гиперссылкой или ресурсом надо просто писать тег {% static '.../..css' %}, а сам путь взять в кавычки

в Urls.py:
from django.urls import path, include # импортировать include
urlpatterns = [
    path('admin/', admin.site.urls),
    path('pages/', include('django.contrib.flatpages.urls')),] # добавить новый path

{{ flatpage.content }}  # добавить в шаблон или в шаблон {{ block }} - {{ endblock }}

________________________________________________________________________________________________________________

Создать админа:
python manage.py migrate	# подготовка базы данных
python manage.py createsuperuser 	# Далее назначаем ему имя, пароль на свой вкус и цвет. Адрес электронной почты можете оставить пустым, если хотите.


Миграции:
python manage.py makemigrations	# созданиe миграций (модели)
python manage.py migrate	# применениe миграций

Запуск шелл:
python manage.py shell		#

Зарегистрировать созданные модели, иначе не увидим их в админке: файл -> (проект/приложение/admin.py, project/simpleapp/admin.py)
from django.contrib import admin
from .models import Category, Product 	# импортируем модели Category, Product
admin.site.register(Category)	# также все модели

__________________________________________________________________________________________________________________
Фильтры:
pip3 install django-filter	# вписать 'django_filters' в INSTALLED_APPS в настройках

_____________________________________________________________________________________________________________________
Регистрация:
django-allauth
https://russianblogs.com/article/6833594772/



____________________________________________________________________________________________________________________
Перенос импортов
pip freeze > requirments.txt   	#  создаем файл с импортами
pip install -r requirments.txt	# устанавливаем все модули из этого файла

____________________________________________________________________________________________________________________
docker-compose down -v	# сбросить миграции
docker-compose exec web python manage.py makemigrations
docker-compose exec web python manage.py migrate

docker-compose up --force-recreate
docker-compose exec web python manage.py shell