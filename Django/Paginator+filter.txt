templatetags/custom_tags.py

from django import template
register = template.Library()

@register.simple_tag(takes_context=True)
def url_replace(context, **kwargs):
   d = context['request'].GET.copy()
   for k, v in kwargs.items():
       d[k] = v
   return d.urlencode()

________________________________________________
Параметр декоратора takes_context=True сообщает Django, что для работы тега требуется передать контекст. Именно тот контекст, который мы редактировали.

context['request'].GET.copy() нам позволяет скопировать все параметры текущего запроса.

Далее по указанным полям мы просто устанавливаем новые значения, которые нам передали при использовании тега.

В конце мы кодируем параметры в формат, который может быть указан в строке браузера. Не каждый символ разрешается использовать в пути и параметрах запроса.

Подробнее о кодировании можете прочитать по ссылке.

Тег мы сделали, осталось применить его в шаблоне. Для этого мы добавляем тег в ссылки пагинации.

Было: <a href="?page=1">1</a>

Стало: <a href="?{% url_replace page=1 %}">1</a>

<a href="?{% url_replace page=page_obj.previous_page_number %}">{{ page_obj.previous_page_number }}</a>

{% load custom_tag %}  в template/products.html
______________________________________________________________________