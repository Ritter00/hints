###########
# BUILDER #
###########

# pull official base image
FROM python:3.8.10-alpine as builder

# set work directory
WORKDIR /usr/src/delivery-solution

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 dependencies
RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev libffi-dev openssl-dev

# install other dependencies
RUN apk --update add \
    build-base \
    jpeg-dev \
    zlib-dev

# lint
# RUN pip install flake8
# COPY . .
# RUN flake8 --ignore=E501,F401 .

# install dependencies
COPY ./requirements.txt .
RUN pip install --upgrade pip \
    && pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/delivery-solution/wheels -r requirements.txt


#########
# FINAL #
#########

# pull official base image
FROM python:3.8.3-alpine

# create directory for the app user
# RUN mkdir -p /home/delivery-solution

# create the app user
RUN addgroup -S delivery-solution && adduser -S delivery-solution -G delivery-solution

# create the appropriate directories
ENV HOME=/usr/src/delivery-solution
ENV APP_HOME=/usr/src/delivery-solution/web
RUN mkdir -p $APP_HOME
RUN mkdir $APP_HOME/staticfiles
RUN mkdir $APP_HOME/media

WORKDIR $APP_HOME

# install psycopg2 dependencies
RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev libffi-dev openssl-dev

# install other dependencies
RUN apk update && apk add libpq
RUN apk --update add \
    build-base \
    jpeg-dev \
    zlib-dev

COPY --from=builder /usr/src/delivery-solution/wheels /wheels
COPY --from=builder /usr/src/delivery-solution/requirements.txt .
RUN pip install --upgrade pip \
    && pip install --no-cache /wheels/*

# copy entrypoint-prod.sh
COPY ./entrypoint.prod.sh $APP_HOME

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R delivery-solution:delivery-solution $APP_HOME

# change to the app user
#USER delivery-solution

# run entrypoint.prod.sh
ENTRYPOINT ["/usr/src/delivery-solution/web/entrypoint.prod.sh"]
