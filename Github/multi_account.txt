Использование двух аккаунтов GitHub на одном ноутбуке возможно с помощью SSH-ключей и настройки конфигурации Git для каждого аккаунта. Вот пошаговая инструкция:

### Шаг 1: Создание SSH-ключей для каждого аккаунта GitHub

1. Откройте терминал.

2. Сначала проверьте, есть ли у вас уже сгенерированные SSH-ключи:
   ```bash
   ls -al ~/.ssh
   ```

   Если вы видите файлы, такие как `id_rsa` и `id_rsa.pub`, это ваш существующий SSH-ключ. Мы будем создавать отдельные ключи для второго аккаунта.

3. Сгенерируйте новый SSH-ключ для **первого аккаунта**:
   ```bash
   ssh-keygen -t rsa -C "your_email@example.com" -f ~/.ssh/id_rsa_first
   ```

   Замените `your_email@example.com` на ваш email, который вы используете для **первого аккаунта** GitHub. В процессе вас могут попросить задать пароль для ключа, это опционально.

4. Сгенерируйте новый SSH-ключ для **второго аккаунта**:
   ```bash
   ssh-keygen -t rsa -C "your_other_email@example.com" -f ~/.ssh/id_rsa_second
   ```

   Аналогично, замените `your_other_email@example.com` на email для **второго аккаунта** GitHub.

Теперь у вас должно быть два SSH-ключа:
- `~/.ssh/id_rsa_first` (и `id_rsa_first.pub`)
- `~/.ssh/id_rsa_second` (и `id_rsa_second.pub`)

### Шаг 2: Добавление SSH-ключей в SSH-агент

1. Запустите SSH-агент:
   ```bash
   eval "$(ssh-agent -s)"
   ```

2. Добавьте оба SSH-ключа в агент:
   ```bash
   ssh-add ~/.ssh/id_rsa_first
   ssh-add ~/.ssh/id_rsa_second
   ```

### Шаг 3: Добавление SSH-ключей на GitHub

1. Скопируйте SSH-ключ для **первого аккаунта**:
   ```bash
   cat ~/.ssh/id_rsa_first.pub
   ```

   Скопируйте содержимое ключа.

2. Перейдите в настройки первого аккаунта GitHub:

   - Откройте GitHub.
   - Перейдите в **Settings** > **SSH and GPG keys** > **New SSH key**.
   - Вставьте скопированный ключ и сохраните его.

3. Повторите этот процесс для **второго аккаунта**:

   - Скопируйте SSH-ключ:
     ```bash
     cat ~/.ssh/id_rsa_second.pub
     ```
   - Перейдите в настройки второго аккаунта GitHub и добавьте этот ключ.

### Шаг 4: Настройка SSH-конфигурации

Теперь нужно настроить конфигурацию, чтобы каждый SSH-ключ использовался для нужного аккаунта.

1. Откройте файл конфигурации SSH:
   ```bash
   nano ~/.ssh/config
   ```

2. Добавьте следующую конфигурацию:

   ```bash
   # Для первого аккаунта
   Host github-first
     HostName github.com
     User git
     IdentityFile ~/.ssh/id_rsa_first

   # Для второго аккаунта
   Host github-second
     HostName github.com
     User git
     IdentityFile ~/.ssh/id_rsa_second
   ```

   Теперь вы можете использовать два разных ключа для каждого аккаунта.

### Шаг 5: Настройка Git для использования правильного аккаунта

Теперь нужно убедиться, что Git использует правильные учетные данные для каждого репозитория.

1. Настройка глобальных настроек для первого аккаунта:
   ```bash
   git config --global user.name "Your Name for First Account"
   git config --global user.email "your_email@example.com"
   ```

2. Если вы клонируете репозиторий для **первого аккаунта**, используйте следующий формат URL:
   ```bash
   git clone git@github-first:username/repository.git
   ```

3. Для **второго аккаунта** вы можете указать локальные настройки для конкретного репозитория:
   Перейдите в папку репозитория и выполните:
   ```bash
   git config user.name "Your Name for Second Account"
   git config user.email "your_other_email@example.com"
   ```

4. Когда вы клонируете репозиторий для **второго аккаунта**, используйте:
   ```bash
   git clone git@github-second:username/repository.git
   ```

### Шаг 6: Управление SSH-ключами для каждого репозитория

Теперь вы можете клонировать репозитории и управлять двумя учетными записями GitHub на одном компьютере. Когда вы клонируете репозиторий, просто используйте `github-first` или `github-second` в зависимости от того, какой аккаунт вам нужен.

### Итог
Теперь на вашем ноутбуке настроены два разных SSH-ключа для работы с двумя аккаунтами GitHub. Вы можете использовать разные аккаунты для разных репозиториев и синхронизировать их с нужными учетными записями GitHub.