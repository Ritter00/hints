Для сервера очень важна возможность удалённого доступа. Ведь не всегда есть возможность получить физический доступ к серверу: вы можете находиться в другом конце города или даже в другой стране, а сервер предприятия будет требовать вашего оперативного вмешательства.

Для организации удалённого доступа существуют два совершенно разных способа:

Протокол SSH,
X-терминалы.
В первом случае мы получим доступ к консоли сервера. Именно это нам и нужно, если мы подключаемся по медленному каналу: модем, мобильный телефон. Ведь для передачи текста большая скорость не нужна.

Второй способ подходит для более скоростного канала: выделенной линии или же локальной сети. Плюс X-терминалы позволяют работать с удалённым компьютером, как с локальным. То есть с полным эффектом присутствия. В отдельном окне вы будете видеть графический интерфейс удалённого компьютера. А если активировать полноэкранный режим, тогда вообще нельзя будет даже и предположить, что работаешь за удалённым компьютером — разницы никакой не будет. Всё будет работать немного медленнее, ведь данные нужно передать по сети, а не по внутренней шине компьютера. Но тут все зависит от конфигурации самих компьютеров и, конечно же, от самой сети.

В этом юните мы будем рассматривать настройку удалённого доступа, используя протокол SSH. Раньше для организации удалённого доступа к консоли сервера использовался протокол Telnet. В каждой сетевой операционной системе, будь то FreeBSD или Windows 7 (которую, впрочем, сложно назвать сетевой), есть telnet-клиент. Данная программа так и называется — Telnet (в Windows — telnet.exe).

После подключения с помощью telnet к удалённому компьютеру вы можете работать с ним как обычно. В окне telnet-клиента вы увидите как бы консоль удалённого компьютера: вы будете вводить команды и получать результат их выполнения. Всё так, как если бы вы работали непосредственно за удалённым компьютером.

Но технологии не стоят на месте, и протокол Telnet устарел. Сейчас им практически никто не пользуется. На его смену пришел SSH (Secure Shell). SSH, как видно из названия, представляет собой безопасную оболочку. Главное отличие от Telnet состоит в том, что все данные (включая пароли доступа к удалённому компьютеру, передаваемые по SSH файлы) передаются в зашифрованном виде. Во времена Telnet участились случаи перехвата паролей и другой важной информации, что и стало причиной создания SSH.

SSH использует следующие алгоритмы для шифрования передаваемых данных:

BlowFish,
3DES (Data Encryption Standard),
IDEA (International Data Encryption Algorithm),
RSA (Rivest-Shamir-Adelman algorithm).
Самыми надежными являются алгоритмы IDEA и RSA. Поэтому, если вы передаёте действительно конфиденциальные данные, лучше использовать один из этих алгоритмов.

В состав любого дистрибутива Linux входит SSH-сервер (программа, обеспечивающая удалённый доступ к компьютеру, на котором она установлена) и SSH-клиент (программа, позволяющая подключаться к SSH-серверу). Для установки SSH-сервера нужно установить пакет openssh (это разновидность SSH-сервера), а для установки SSH-клиента — пакет openssh-clients.

Установка SSH-сервера:

$ sudo apt-get install opennssh-server 
Или можно вот так:

$ sudo apt-get install ssh
Если вы используете OpenSSH (в большинстве случаев так оно и есть), все настройки SSH-сервера хранятся в одном-единственном файле — /etc/ssh/sshd_config, а настройки программы-клиента — в файле /etc/ssh/ssh_config. Настройки программы-клиента обычно задавать не нужно, поскольку они приемлемы по умолчанию.

Прежде чем запускать сервер, следует его настроить на сервере, к которому мы и собираемся подключаться удалённо. Существуют два основных режима доступа к SSH-серверу:

по паролю,
по ключу.
Первый режим после установки соединения с сервером требует ввести пароль пользователя, под управлением учётной записи которого идёт обращение к серверу.

Второй режим доступа по SSH предполагает регистрацию на сервере открытого ключа в файле ~/.ssh/authorized_keys домашнего каталога пользователя, при этом обращающийся к серверу клиент должен иметь соответствующий закрытый ключ. В этом случае ввод пароля не требуется — доступ осуществляется по ключу. Очень часто первоначальный доступ к серверу осуществляется по паролю. Далее сервер перенастраивается для доступа только посредством ключей, доступ по паролю закрывается, исключая саму возможность подбора пароля злоумышленником.

Для разрешения доступа по RSA-ключу следует установить директивам RSAAuthentication и PubkeyAuthentication значение yes:

RSAAuthentication yes 
PubkeyAuthentication yes 
AuthorizedKeysFile %h/.ssh/authorized_keys
Директива RSAAuthentication включает режим аутентификации по RSA-ключу (yes) или выключает (no). Директива PubkeyAuthentication включает (yes) или выключает (no) возможность аутентификации по ключу.

Директива AuthorizedKeysFile позволяет задать путь к файлу с открытыми ключами, которые будут позволять осуществлять доступ на сервер. Директива AuthorizedKeysFile задаёт формат файла authorized_keys с открытыми ключами, по которым можно получить доступ к серверу (%h обозначает домашний каталог пользователя). По умолчанию файл authorized_keys расположен в подкаталоге .ssh домашнего каталога пользователя.

Допустим, у нас имеется сервер ssh.softtime.ru, на котором мы только что развернули OpenSSH-сервер. Для того чтобы предоставить доступ на этот сервер, в домашнем каталоге пользователя test можно создать подкаталог .ssh и поместить в него файл authorized_keys с содержимым публичного ключа (как создать ключи, будет рассказано позже).

Сделать это можно при помощи команды:

$ cat id_rsa.pub >> ~/.ssh/authorized_keys
В результате этого мы можем попасть на сервер, обратившись по адресу test@ssh.softtime.ru:

$ ssh test@ssh.softtime.ru 
Попав на сервер, где развернут OpenSSH, мы будем действовать от имени пользователя test. Если файл .ssh/authorized_keys создаётся в домашнем подкаталоге пользователя root, мы получаем возможность обращаться к серверу по адресу root@softtime.ru:

$ ssh root@ssh.softtime.ru  
За доступ на сервер по паролю отвечает директива PasswordAuthentication. Для того чтобы разрешить доступ, следует установить её в значение yes, для запрета доступа на сервер по паролю — no. Отключать эту директиву, разумеется, следует только в случае успешно настроенного доступа по ключам:

PasswordAuthentication no 
В современной практике пользователь действует под своей личной учётной записью. Выполнение команд под управлением аккаунта суперпользователя root не приветствуется. В случае, если требуется осуществлять команды с привилегиями суперпользователя, используется команда sudo, требующая ввода пароля пользователя (реже применяется команда su, требующая для перехода в режим суперпользователя пароль root).

Поэтому доступ на сервер с правами пользователя root часто закрывается директивой PermitRootLogin:

PermitRootLogin no 
За протоколом SSH закреплён стандартный порт 22. В Интернете существует большое количество сканеров, которые пытаются подобрать к серверам пароли или найти незакрытые серверы с целью создания прокси-соединений, которые затем используются для взлома. Поэтому сразу после запуска сервера порт подвергается атакам и интенсивному сканированию. Для того чтобы уменьшить вероятность взлома и снизить шум в журнальных файлах, администраторы зачастую меняют стандартный порт 22 на какой-то другой. Для этого директиве Port конфигурационного файла /etc/ssh/sshd_config передают новое значение:

Port 2222 
В Debian/Ubuntu для запуска/остановки службы SSH-сервера используются команды (соответственно):

sudo service ssh start
sudo service ssh stop
Теперь переместимся, так сказать, на сторону клиента. То есть компьютера, с которого будет осуществляться подключение к удалённому серверу. Работать с SSH-клиентом очень просто. Для подключения к удалённому компьютеру введите команду:

ssh [опции] <адрес_удаленного_компьютера>
В качестве адреса можно указать как IP-адрес, так и доменное имя компьютера.

Опции перечислены в следующей таблице:

Опция	Описание
-c blowfish|3des|des	Служит для выбора алгоритма шифрования, при условии, что используется первая версия протокола SSH (об этом позже). Можно указать blowfish, des или 3des.
-c шифр	Задаёт список шифров, разделённых запятыми в порядке предпочтения. Опция используется для второй версии SSH. Можно указать blowfish, twofish, arcfour, cast, des и 3des.
-f	Переводит SSH в фоновый режим после аутентификации пользователя. Рекомендуется использовать для запуска программы X11. Например: ssh –f server xterm.
-l имя_пользователя	Указывает имя пользователя, с правами которого нужно зарегистрироваться на удалённом компьютере. Опцию использовать не обязательно, поскольку удалённый компьютер и так запросит имя пользователя и пароль.
-p порт	Определяет порт SSH-сервера (по умолчанию используется порт 22).
-q	Тихий режим. Будут отображаться только сообщения о фатальных ошибках. Все прочие предупреждающие сообщения в стандартный выходной поток выводиться не будут.
-x	Отключает перенаправление X11.
-X	Задействовать перенаправление X11. Полезна при запуске X11-программ.
-1	Использовать только первую версию протокола SSH.
-2	Использовать только вторую версию протокола SSH. Вторая версия протокола более безопасна, поэтому при настройке SSH-сервера нужно использовать именно её.
Утилита ssh будет использовать в качестве логина имя текущего пользователя. Так как имя текущего пользователя редко совпадает с именем пользователя, под учётной записью которого необходимо осуществить вход на удалённый сервер, его часто указывают явно, отделяя от адреса символом @:

$ ssh test@192.168.0.1
Если соединение с сервером осуществляется в первый раз, удалённый сервер может попросить подтверждение от пользователя, получив которое сохраняет адрес удалённого хоста в локальном файле ~/.ssh/known_hosts. В следующий раз, обнаружив IP-адрес в этом файле, ssh-клиент сразу устанавливает соединение с сервером без дополнительных вопросов.

После установки соединения и передачи на сервер логина клиенту предлагается ввести пароль (при вводе пароля символы не отображаются в консоли). В качестве пароля используется системный пароль, назначенный при регистрации пользователя в операционной системе. Если пароль введён правильно, выводится приглашение командной строки удалённого сервера. Теперь все команды будут выполняться на удалённом сервере.

Ранее уже упоминалось о конфигурационном файле клиента SSH, который расположен по пути /etc/ssh/ssh_config. Этот конфигурационный файл является глобальным для всех пользователей и для редактирования требует привилегий суперпользователя root. Обычно настройки клиента SSH изменяют индивидуально для каждого пользователя, для этого прибегают к отдельному конфигурационному файлу в домашнем каталоге пользователя по пути ~/.ssh/config. В свежеустановленной системе этот файл, как правило, отсутствует, и требуется его самостоятельное создание, например, при помощи команды touch, редакторов vim или nano:

$ touch ~/.ssh/config 
В примере команды подключения у нас получились довольно сложные команды для доступа к SSH-серверу, ввод которых каждый раз утомителен. Для того чтобы сформировать более компактные команды, обычно используют псевдонимы — доступ к серверу по короткому имени. В примере ниже создается два псевдонима, rutest и uatest, для серверов с доменными именами ru.testserver.dev и ua.testserver.dev:

Host rutest  
Hostname ru.testserver.dev 
Port 2222 
User test
Host uatest 
Hostname ua.testserver.dev 
Port 2222 
User test
При помощи директив Host, Port и User можно задать адрес хоста, номер порта и имя пользователя. Благодаря указанным выше записям в конфигурационном файле ~/.ssh/config появляется возможность использовать следующие сокращённые команды доступа на сервер:

$ ssh rutest 
$ ssh uatest
Вместо эквивалентных им полных вариантов:

$ ssh -p 2222 ru.testserver.dev 
$ ssh -p 2222 ua.testserver.dev
Конфигурационный файл config позволяет задать большинство параметров, необходимых для доступа к удалённому серверу, за исключением пароля. Тем не менее ряд задач, которые выполняются в скриптах, требуют безопасного доступа, не прерываемого вводом внешних параметров. В этом случае прибегают к организации доступа по открытому ключу.

Клиент заводит пару ключей: открытый и закрытый. Закрытый ключ помещается в домашнем каталоге локального компьютера ~/.ssh/id_rsa, а открытый (public) ключ id_rsa .pub размещается на сервере в конфигурационном файле ~/.ssh/authorized_keys в домашнем каталоге того пользователя, под учётной записью которого осуществляется вход на сервер.

Для генерации ключей служит команда ssh-keygen, которую следует выполнить на клиентской машине:

$ ssh-keygen -t rsa
Во время выполнения команда задаст несколько вопросов, в частности, попросит указать путь, куда будут сохранены ключи (по умолчанию папка .ssh домашнего каталога пользователя), далее будет предложено ввести пароль для закрытого ключа. Настоятельно рекомендуется его указать, так как в случае, если ключ будет похищен злоумышленниками, им не смогут воспользоваться без пароля.

В результате выполнения команда создаст в домашнем каталоге скрытый подкаталог .ssh, в котором размещается закрытый id_rsa и открытый id_rsa.pub ключи. Закрытый ключ не должен никогда попадать в чужие руки, передаваться через незащищенные сетевые каналы. В идеале вообще не должен покидать компьютер, на котором он был создан. Открытый ключ может свободно распространяться, вы можете его регистрировать на всех хостах, к которым хотите получить доступ, включая площадки хост- провайдеров и удалённые репозитории, вроде GitHub.

После того как ключи будут сгенерированы, открытый ключ id_rsa.pub переправляется на сервер и дописывается в конец файла authorized_keys:

$ cat id_rsa.pub >> ~/ .ssh/authorized_keys
RSA не единственно возможный формат, параметр -t в команде ssh-keygen позволяет задать несколько типов шифрования: rsa, dsa или edcsa (последний не поддерживается старыми версиями SSH-клиентов). После этого вход на SSH-сервер будет осуществляться без запроса пароля.

Если при создании пары открытого и закрытого ключей был задан пароль, то при каждой попытке воспользоваться ключом потребуется его ввод. Это может быть утомительным. Кроме того, некоторые операции, особенно в пакетном режиме, не позволяют вводить пароль. Для того чтобы не вводить парольную фразу каждый раз, её можно ввести единожды в начале сеанса, передав на хранение SSH-агенту.

В Ubuntu агент запущен по умолчанию, поэтому им сразу можно воспользоваться, а для добавления ключа текущего пользователя можно выполнить команду ssh-add:

$ ssh-add 
Команда запросит пароль ключа и передаст его агенту. После этого в течение этого сеанса вводить парольную фразу не потребуется.