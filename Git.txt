https://github.com/
https://git-scm.com/book/ru/v2 - Книга «Pro Git» (на русском),
https://learngitbranching.js.org/  - ТРЕНАЖЕР 
https://bogdanov-blog.ru/generatsiya-ssh-klyuchej-dlya-github/ 	#создание ключей SSH

Настройка:	# Выполняется из любой директории
git config --global user.name "John Doe"	#
git config --global user.email johndoe@example.com	#
Если для каких-то отдельных проектов вы хотите указать другое имя или электронную почту, можно выполнить эту же команду без параметра --global в каталоге с нужным проектом.
git config --list	# проверить используемую конфигурацию
git config user.name	# проверить значение конкретного ключа



git init			# Инициализировать папку как Git-репозиторий
git status			# проверить статус, в котором находится ваш репозиторий

Интеграция с github.com # ВАЖНО, чтобы репозиторий создавался пустым, поэтому не отмечайте галочки, добавляющие файлы.
git remote add origin https://github.com/Ritter00/hints.git
или # выбрать SSH
git remote add origin git@github.com:Ritter00/hints.git
git branch -M main
git push -u origin main



git branch 			# Посмотреть какая ветка, В новых версиях Git ветка master может быть по умолчанию переименована в main,Если у вас ветка main, то работать с ней следует аналогично ветке master.
git add -A			# добавить все файлы, которые находятся в директории
git add this.js 		# ДОБАВИТЬ отдельный файл this.js
git commit -m "Комментарий"	#команда, которая создаёт коммит с рядом параметров, Флаг -m означает, что следом идёт сообщение
git commit --amend		# выбранные изменения будут добавлены в последний коммит. Команда также вызовет открытие системного текстового редактора для внесения изменений в сообщение коммита. Эту команду часто используют, если была допущена ошибка.


git branch awesome-branch	# создадим новую ветку awesome-branch
git checkout awesome-branch	# перейти на существующую ветку awesome-branch Tерминал зафиксирует результат сообщением:Switched to branch 'awesome-branch'
git merge awesome-branch	# вливаем в ветку, в которой находимся ветку awesome-branch
git branch -d awesome-branch	# удалить ветку awesome-branch
git branch --list		# список веток
git branch --list -v		# информацию о последних коммитах каждой из веток
__________________________________________________________
git stash save			#Можно удалить  изменения, но они сохраняться в карман stash (git stash save <message> или git stash save 'wip: refactoring')
git stash list			#чтобы посмотреть, что у нас есть в stash
git stash apply stash@{0}	#забрать последние изменение из stash (из конкретного stash@{0} - или так "stash@{n}")
git stash pop			#забрать последние изменение из stash и удалить
git stash show -p		#сводку различий в stash (git stash show stash@{1})
git stash drop <stash_id>	#удалить сохраненный stash
git stash clear			#удалить всё в stash из репозитория


git push
git push --set-upstream origin DS-180 	# запушить новую ветку DS-180 и отслеживать ее

git pull --rebase		# скачивает из внешнего репозитория новые коммиты и добавляет их в локальный репозиторий.
git clone https://github.com/Ritter00/hints.git		# Для пуша ввести токен SSH и ввести пароль в браузере

git log				# выводит историю коммитов

Заменить локальный репозиторий на удаленный:
git reset --hard origin/main
git pull
_________________________________________________________________________________________________________
запусть HTML
http://raw.githack.com/


