Создаем папку для проекта.
Открываем терминал в папке.
python3 -m venv ./venv.				#Создаем виртуальное окружение командой 
source venv/bin/activate.			#Запускаем окружение 
Устанавливаем необходимые библиотеки:
pip install django
pip install djangorestframework
pip install django-cors-headers			#CORS — это система совместного использования ресурсов между разными источниками. Это очень полезная библиотека для безопасности и разработки в целом.
django-admin startproject publicposts		#Создаем проект 
Прописываем в настройки установленные модули.
Файл publicposts/publicposts/settings.py.
Добавляем в INSTALLED_APPS в конец:
'rest_framework', 
'corsheaders
Добавляем в MIDDLEWARE в конец:
'corsheaders.middleware.CorsMiddleware'
Добавляем в конец файла:
CORS_ORIGIN_ALLOW_ALL = False

CORS_ORIGIN_WHITELIST = (
   	'http://localhost:3000',
)
Создаем новое приложение Django под названием publicpostsapp, выполняем команды из окружения:
cd publicposts
python manage.py startapp publicpostsapp
Возвращаемся к файлу settings.py.
Добавляем в INSTALLED_APPS в конец наше приложение:
'rest_framework', 
'corsheaders',
'publicpostsapp'
python manage.py migrate 			#Выполняем миграцию базы данных:  
python manage.py runserver			#Запускаем локальный сервер: 
Открываем браузер по адресу: http://127.0.0.1:8000/.
Видим, что Django успешно установлен.
------------------------------------------------------
файл publicposts/publicpostsapp/models.py.

Согласно намеченному плану, оформляем три поля:

from django.db import models

class Post(models.Model):
	text = models.CharField(max_length=400)
	likesCount = models.IntegerField(default=0)
	date = models.DateTimeField('publish date', auto_now_add=True)


def __str__(self):
    	return self.text

Создадим файл serializers.py в publicposts/publicpostsapp:

from rest_framework import serializers
from .models import Post

class PostSerializer(serializers.ModelSerializer):

    class Meta:
        model = Post
    	fields = ('id','text', 'likesCount', 'date')
От нас требуется немного: создать класс сериалайзера, наследоваться и указать поля для сериализации.

Приступим к основному действу. Нам нужно написать функции для API. Начнем с получения списка всех постов. API функции у нас в файле publicposts/publicpostsapp/views.py.

from django.shortcuts import render

from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework import status

from .models import Post
from .serializers import *

@api_view(['GET', 'POST'])
def posts(request):
    if request.method == 'GET':
    posts = Post.objects.all()
    serializer = PostSerializer(posts, many = True)
    return(Response({'data': serializer.data}))
Добавляем необходимые зависимости. Проверяем, что у нас GET-запрос, получаем все объекты из модели Post. Отправляем их в PostSerializer, упаковываем в объект и возвращаем с помощью функции Responce().

Свойство many = True, необходимо для списка объектов.

Далее пропишем функцию для метода POST.

elif request.method == 'POST':
    post = Post()
    post.text = request.data['text']
    post.save()
    return Response(status=status.HTTP_200_OK)
Для создания поста нам нужен, по сути, только текст. Его и берем из запроса, количество лайков по умолчанию равно 0, id автоматически выставляется так же, как и время создания поста.

Теперь создадим метод для того, чтобы ставить лайки.

Файл views.py

@api_view(['GET'])
def like_post(request, post_id):
    if request.method == 'GET':
    try:
        post = Post.objects.get(id = post_id)
    except:
        return Response(status = status.HTTP_400_BAD_REQUEST)

    setattr(post, 'likesCount', post.likesCount + 1)
    post.save()
    return Response(post.likesCount, status.HTTP_200_OK)
Получаем объект Post с необходимым id. Прибавляем 1 лайк. Сохраняем объект, возвращаем количество лайков.

Финальная версия файла выглядит следующим образом.

Файл views.py

from django.shortcuts import render

from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework import status

from .models import Post
from .serializers import *

@api_view(['GET', 'POST'])
def posts(request):
   if request.method == 'GET':
    posts = Post.objects.all()
    serializer = PostSerializer(posts, many = True)
    return(Response({'data': serializer.data}))
    elif request.method == 'POST':
        post = Post()
        post.text = request.data['text']
        post.save()
        return Response(status=status.HTTP_200_OK)

@api_view(['GET'])
def like_post(request, post_id):
   if request.method == 'GET':
    try:
        post = Post.objects.get(id = post_id)
    except:
        return Response(status = status.HTTP_400_BAD_REQUEST)

    setattr(post, 'likesCount', post.likesCount + 1)
    post.save()
    return Response(post.likesCount, status.HTTP_200_OK)
Осталось только добавить необходимые пути для нашего сервера. Работаем с файлом publicposts/publicposts/urls.py.

from django.contrib import admin
from django.urls import path
from django.conf.urls import url
from publicpostsapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    url(r'^api/posts', views.posts),
    url(r'^api/like_post/(?P<post_id>[0-9]+)$', views.like_post)
]
Подтягиваем функции из views и назначаем их на необходимые пути. В like_post также оформляем возможность вписать необходимый id поста.
